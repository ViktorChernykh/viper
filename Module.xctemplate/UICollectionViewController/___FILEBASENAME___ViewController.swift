//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//
//  This file was generated by the VIPER Templates,
//  see https://github.com/ViktorChernykh/viper-template
//

import Foundation
import UIKit

private let reuseIdentifier = "Cell"

final class ___VARIABLE_moduleName___ViewController: UICollectionViewController, ___VARIABLE_moduleName___ViewControllerBase {
    
    // MARK: @IBOutlets
    @IBOutlet weak var collection: UICollectionView!
    //@IBOutlet weak var nameLabel: UILabel!

    // MARK: Variables
    let selfToASomethingSegueName = "showSomething"
    var presenter: ___VARIABLE_moduleName___ViewOutput?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupView()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupView()
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Uncomment the following line to preserve selection between presentations
        // self.clearsSelectionOnViewWillAppear = false
        
        // Register cell classes
        self.collectionView!.register(UICollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)
        
        // Do any additional setup after loading the view.
        ___VARIABLE_moduleName___ModuleBuilder.shared.build(with: self)
        setupView()
    }

    // MARK: Do something

    func setupView() {
        presenter?.setupView()
    }

}

// MARK: - Navigation

extension ___VARIABLE_moduleName___ViewController {

    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        presenter?.goToOtherView()
    }
}

// MARK: UICollectionViewDataSource

extension ___VARIABLE_moduleName___ViewController {

    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 0
    }


    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of items
        return 0
    }

    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath)

        // Configure the cell

        return cell
    }
}

// MARK: UICollectionViewDelegate

extension ___VARIABLE_moduleName___ViewController {
    /*
    // Uncomment this method to specify if the specified item should be highlighted during tracking
    override func collectionView(_ collectionView: UICollectionView, shouldHighlightItemAt indexPath: IndexPath) -> Bool {
        return true
    }
    */

    /*
    // Uncomment this method to specify if the specified item should be selected
    override func collectionView(_ collectionView: UICollectionView, shouldSelectItemAt indexPath: IndexPath) -> Bool {
        return true
    }
    */

    /*
    // Uncomment these methods to specify if an action menu should be displayed for the specified item, and react to actions performed on the item
    override func collectionView(_ collectionView: UICollectionView, shouldShowMenuForItemAt indexPath: IndexPath) -> Bool {
        return false
    }

    override func collectionView(_ collectionView: UICollectionView, canPerformAction action: Selector, forItemAt indexPath: IndexPath, withSender sender: Any?) -> Bool {
        return false
    }

    override func collectionView(_ collectionView: UICollectionView, performAction action: Selector, forItemAt indexPath: IndexPath, withSender sender: Any?) {
    
    }
    */
}

// MARK: - ___VARIABLE_moduleName___ViewInput

extension ___VARIABLE_moduleName___ViewController: ___VARIABLE_moduleName___ViewInput {
    
    func setSomething(with title: String) {
        //nameLabel.text = title
    }
    
    func reloadData() {
        DispatchQueue.main.async {
            self.collectionView.reloadData()
        }
    }
}
